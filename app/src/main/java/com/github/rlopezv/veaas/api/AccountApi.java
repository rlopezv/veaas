/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.rlopezv.veaas.api;

import java.util.Optional;

import javax.validation.Valid;

import com.github.rlopezv.veaas.api.model.AccountAccount;
import com.github.rlopezv.veaas.api.model.AccountAccountsList;
import com.github.rlopezv.veaas.api.model.AccountCheckResponse;
import com.github.rlopezv.veaas.api.model.AccountCreateTokenRequest;
import com.github.rlopezv.veaas.api.model.AccountCreateTokenResponse;
import com.github.rlopezv.veaas.api.model.AccountUpdatePasswordRequest;
import com.github.rlopezv.veaas.api.model.RuntimeError;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.context.request.NativeWebRequest;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;


@Validated
@Tag(name = "account", description = "Acoount Service API")
public interface AccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api//account/check/{resource}/{action}/{subresource} : Checks if the current account has permission to perform an action
     *
     * @param resource  (required)
     * @param action  (required)
     * @param subresource  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Checks if the current account has permission to perform an action", operationId = "accountServiceCheck",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", 
        schema = @Schema(implementation =  AccountCheckResponse.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", 
        schema = @Schema(implementation =   RuntimeError.class))})})
    @GetMapping(
        value = "/api//account/check/{resource}/{action}/{subresource}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<AccountCheckResponse> _accountServiceCheck(@Parameter(example = "",required=true) @PathVariable("resource") String resource,@Parameter(example = "",required=true) @PathVariable("action") String action,@Parameter(example = "",required=true) @PathVariable("subresource") String subresource) {
        return accountServiceCheck(resource, action, subresource);
    }

    // Override this method
    default  ResponseEntity<AccountCheckResponse> accountServiceCheck(String resource, String action, String subresource) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api//account/{name}/token : Creates a token for the account
     *
     * @param name  (required)
     * @param body  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Creates a token for the account", operationId = "accountServiceCreateToken",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  AccountCreateTokenResponse.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeError.class))})})
    @PostMapping(
        value = "/api//account/{name}/token",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<AccountCreateTokenResponse> _accountServiceCreateToken(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "" ,required=true )  @Valid @RequestBody AccountCreateTokenRequest body) {
        return accountServiceCreateToken(name, body);
    }

    // Override this method
    default  ResponseEntity<AccountCreateTokenResponse> accountServiceCreateToken(String name, AccountCreateTokenRequest body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api//account/{name}/token/{id} : Deletes a token for the account
     *
     * @param name  (required)
     * @param id  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Deletes a token for the account", operationId = "accountServiceDeleteToken",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  Object.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeError.class))})})
    @DeleteMapping(
        value = "/api//account/{name}/token/{id}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<Object> _accountServiceDeleteToken(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "",required=true) @PathVariable("id") String id) {
        return accountServiceDeleteToken(name, id);
    }

    // Override this method
    default  ResponseEntity<Object> accountServiceDeleteToken(String name, String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api//account/{name} : GetAccount returns an account
     *
     * @param name  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "GetAccount returns an account", operationId = "accountServiceGetAccount",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  AccountAccount.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeError.class))})})
    @GetMapping(
        value = "/api//account/{name}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<AccountAccount> _accountServiceGetAccount(@Parameter(example = "",required=true) @PathVariable("name") String name) {
        return accountServiceGetAccount(name);
    }

    // Override this method
    default  ResponseEntity<AccountAccount> accountServiceGetAccount(String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api//account : Returns the list of accounts
     *
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Returns the list of accounts", operationId = "accountServiceListAccounts",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  AccountAccountsList.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeError.class))})})
    @GetMapping(
        value = "/api//account",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<AccountAccountsList> _accountServiceListAccounts() {
        return accountServiceListAccounts();
    }

    // Override this method
    default  ResponseEntity<AccountAccountsList> accountServiceListAccounts() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api//account/password : Updates an account&#39;s password to a new value
     *
     * @param body  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Updates an account's password to a new value", operationId = "accountServiceUpdatePassword",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  Object.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeError.class))})})
    @PutMapping(
        value = "/api//account/password",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<Object> _accountServiceUpdatePassword(@Parameter(example = "" ,required=true )  @Valid @RequestBody AccountUpdatePasswordRequest body) {
        return accountServiceUpdatePassword(body);
    }

    // Override this method
    default  ResponseEntity<Object> accountServiceUpdatePassword(AccountUpdatePasswordRequest body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }




}
