/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.rlopezv.veaas.api;

import com.github.rlopezv.veaas.api.model.AccountAccountDto;
import com.github.rlopezv.veaas.api.model.AccountAccountsListDto;
import com.github.rlopezv.veaas.api.model.AccountCheckResponseDto;
import com.github.rlopezv.veaas.api.model.AccountCreateTokenRequestDto;
import com.github.rlopezv.veaas.api.model.AccountCreateTokenResponseDto;
import com.github.rlopezv.veaas.api.model.AccountUpdatePasswordRequestDto;
import com.github.rlopezv.veaas.api.model.InlineResponse2001Dto;
import com.github.rlopezv.veaas.api.model.InlineResponse200Dto;
import com.github.rlopezv.veaas.api.model.ProviderSettingsDto;
import com.github.rlopezv.veaas.api.model.RepositoryManifestResponseDto;
import com.github.rlopezv.veaas.api.model.RepositoryRefsDto;
import com.github.rlopezv.veaas.api.model.RepositoryRepoWorkSpaceDetailsQueryDto;
import com.github.rlopezv.veaas.api.model.RepositoryRepoWorkSpaceDetailsResponseDto;
import com.github.rlopezv.veaas.api.model.RepositoryRepoWorkSpacesResponseDto;
import com.github.rlopezv.veaas.api.model.RuntimeErrorDto;
import com.github.rlopezv.veaas.api.model.V1EventListDto;
import com.github.rlopezv.veaas.api.model.V1ProviderDto;
import com.github.rlopezv.veaas.api.model.V1ProviderListDto;
import com.github.rlopezv.veaas.api.model.V1RepoCredsDto;
import com.github.rlopezv.veaas.api.model.V1RepoCredsListDto;
import com.github.rlopezv.veaas.api.model.V1RepositoryDto;
import com.github.rlopezv.veaas.api.model.V1RepositoryListDto;
import com.github.rlopezv.veaas.api.model.V1RevisionMetadataDto;
import com.github.rlopezv.veaas.api.model.V1WorkSpaceDto;
import com.github.rlopezv.veaas.api.model.V1WorkSpaceListDto;
import com.github.rlopezv.veaas.api.model.V1WorkSpaceSpecDto;
import com.github.rlopezv.veaas.api.model.V1WorkSpaceTreeDto;
import com.github.rlopezv.veaas.api.model.VersionVersionMessageDto;
import com.github.rlopezv.veaas.api.model.WorkSpaceManagedResourcesResponseDto;
import com.github.rlopezv.veaas.api.model.WorkSpaceResourceActionsListResponseDto;
import com.github.rlopezv.veaas.api.model.WorkSpaceWorkSpacePatchRequestDto;
import com.github.rlopezv.veaas.api.model.WorkSpaceWorkSpaceResourceResponseDto;
import com.github.rlopezv.veaas.api.model.WorkSpaceWorkSpaceResponseDto;
import com.github.rlopezv.veaas.api.model.WorkSpaceWorkSpaceRollbackRequestDto;
import com.github.rlopezv.veaas.api.model.WorkSpaceWorkSpaceSyncRequestDto;
import com.github.rlopezv.veaas.api.model.WorkSpaceWorkSpaceSyncWindowsResponseDto;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import io.swagger.v3.oas.annotations.tags.*;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import io.swagger.v3.oas.annotations.media.*;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-09-26T12:04:00.942225+02:00[Europe/Madrid]")
@Validated
@Tag(name = "api", description = "the api API")
public interface VeaasApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/account/check/{resource}/{action}/{subresource} : Checks if the current account has permission to perform an action
     *
     * @param resource  (required)
     * @param action  (required)
     * @param subresource  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Checks if the current account has permission to perform an action", operationId = "accountServiceCheck",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", 
        schema = @Schema(implementation =  AccountCheckResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", 
        schema = @Schema(implementation =   RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/account/check/{resource}/{action}/{subresource}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<AccountCheckResponseDto> _accountServiceCheck(@Parameter(example = "",required=true) @PathVariable("resource") String resource,@Parameter(example = "",required=true) @PathVariable("action") String action,@Parameter(example = "",required=true) @PathVariable("subresource") String subresource) {
        return accountServiceCheck(resource, action, subresource);
    }

    // Override this method
    default  ResponseEntity<AccountCheckResponseDto> accountServiceCheck(String resource, String action, String subresource) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/account/{name}/token : Creates a token for the account
     *
     * @param name  (required)
     * @param body  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Creates a token for the account", operationId = "accountServiceCreateToken",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  AccountCreateTokenResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/account/{name}/token",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<AccountCreateTokenResponseDto> _accountServiceCreateToken(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "" ,required=true )  @Valid @RequestBody AccountCreateTokenRequestDto body) {
        return accountServiceCreateToken(name, body);
    }

    // Override this method
    default  ResponseEntity<AccountCreateTokenResponseDto> accountServiceCreateToken(String name, AccountCreateTokenRequestDto body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/account/{name}/token/{id} : Deletes a token for the account
     *
     * @param name  (required)
     * @param id  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Deletes a token for the account", operationId = "accountServiceDeleteToken",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  Object.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @DeleteMapping(
        value = "/api/v1/account/{name}/token/{id}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<Object> _accountServiceDeleteToken(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "",required=true) @PathVariable("id") String id) {
        return accountServiceDeleteToken(name, id);
    }

    // Override this method
    default  ResponseEntity<Object> accountServiceDeleteToken(String name, String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/account/{name} : GetAccount returns an account
     *
     * @param name  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "GetAccount returns an account", operationId = "accountServiceGetAccount",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  AccountAccountDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/account/{name}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<AccountAccountDto> _accountServiceGetAccount(@Parameter(example = "",required=true) @PathVariable("name") String name) {
        return accountServiceGetAccount(name);
    }

    // Override this method
    default  ResponseEntity<AccountAccountDto> accountServiceGetAccount(String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/account : Returns the list of accounts
     *
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Returns the list of accounts", operationId = "accountServiceListAccounts",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  AccountAccountsListDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/account",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<AccountAccountsListDto> _accountServiceListAccounts() {
        return accountServiceListAccounts();
    }

    // Override this method
    default  ResponseEntity<AccountAccountsListDto> accountServiceListAccounts() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/account/password : Updates an account&#39;s password to a new value
     *
     * @param body  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Updates an account's password to a new value", operationId = "accountServiceUpdatePassword",  tags={ "AccountService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  Object.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PutMapping(
        value = "/api/v1/account/password",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<Object> _accountServiceUpdatePassword(@Parameter(example = "" ,required=true )  @Valid @RequestBody AccountUpdatePasswordRequestDto body) {
        return accountServiceUpdatePassword(body);
    }

    // Override this method
    default  ResponseEntity<Object> accountServiceUpdatePassword(AccountUpdatePasswordRequestDto body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/providers : Create creates a provider
     *
     * @param body  (required)
     * @param upsert  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Create creates a provider", operationId = "providerServiceCreate", tags={ "ProviderService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1ProviderDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/providers",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1ProviderDto> _providerServiceCreate(@Parameter(example = "" ,required=true )  @Valid @RequestBody V1ProviderDto body,@Parameter(example = "") @Valid @RequestParam(value = "upsert", required = false) Boolean upsert) {
        return providerServiceCreate(body, upsert);
    }

    // Override this method
    default  ResponseEntity<V1ProviderDto> providerServiceCreate(V1ProviderDto body, Boolean upsert) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/providers/{server} : Delete deletes a provider
     *
     * @param server  (required)
     * @param name  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Delete deletes a provider", operationId = "providerServiceDelete",  tags={ "ProviderService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  Object.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @DeleteMapping(
        value = "/api/v1/providers/{server}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<Object> _providerServiceDelete(@Parameter(example = "",required=true) @PathVariable("server") String server,@Parameter(example = "") @Valid @RequestParam(value = "name", required = false) String name) {
        return providerServiceDelete(server, name);
    }

    // Override this method
    default  ResponseEntity<Object> providerServiceDelete(String server, String name) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/providers/{server} : Get returns a provider by server address
     *
     * @param server  (required)
     * @param name  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Get returns a provider by server address", operationId = "providerServiceGet",  tags={ "ProviderService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1ProviderDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/providers/{server}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<V1ProviderDto> _providerServiceGet(@Parameter(example = "",required=true) @PathVariable("server") String server,@Parameter(example = "") @Valid @RequestParam(value = "name", required = false) String name) {
        return providerServiceGet(server, name);
    }

    // Override this method
    default  ResponseEntity<V1ProviderDto> providerServiceGet(String server, String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/providers/{server}/invalidate-cache : InvalidateCache invalidates provider cache
     *
     * @param server  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "InvalidateCache invalidates provider cache", operationId = "providerServiceInvalidateCache", tags={ "ProviderService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1ProviderDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/providers/{server}/invalidate-cache",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<V1ProviderDto> _providerServiceInvalidateCache(@Parameter(example = "",required=true) @PathVariable("server") String server) {
        return providerServiceInvalidateCache(server);
    }

    // Override this method
    default  ResponseEntity<V1ProviderDto> providerServiceInvalidateCache(String server) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/providers : List returns list of providers
     *
     * @param server  (optional)
     * @param name  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "List returns list of providers", operationId = "providerServiceList",  tags={ "ProviderService" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1ProviderListDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/providers",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<V1ProviderListDto> _providerServiceList(@Parameter(example = "") @Valid @RequestParam(value = "server", required = false) String server,@Parameter(example = "") @Valid @RequestParam(value = "name", required = false) String name) {
        return providerServiceList(server, name);
    }

    // Override this method
    default  ResponseEntity<V1ProviderListDto> providerServiceList(String server, String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/providers/{server}/rotate-auth : RotateAuth rotates the bearer token used for a provider
     *
     * @param server  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "RotateAuth rotates the bearer token used for a provider", operationId = "providerServiceRotateAuth",  tags={ "ProviderService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  Object.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/providers/{server}/rotate-auth",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<Object> _providerServiceRotateAuth(@Parameter(example = "",required=true) @PathVariable("server") String server) {
        return providerServiceRotateAuth(server);
    }

    // Override this method
    default  ResponseEntity<Object> providerServiceRotateAuth(String server) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/providers/{provider.server} : Update updates a provider
     *
     * @param providerServer Server is the API server URL of the Kubernetes provider (required)
     * @param body  (required)
     * @param updatedFields  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Update updates a provider", operationId = "providerServiceUpdate", tags={ "ProviderService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1ProviderDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PutMapping(
        value = "/api/v1/providers/{provider.server}",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1ProviderDto> _providerServiceUpdate(@Parameter(example = "Server is the API server URL of the Kubernetes provider",required=true) @PathVariable("provider.server") String providerServer,@Parameter(example = "" ,required=true )  @Valid @RequestBody V1ProviderDto body,@Parameter(example = "") @Valid @RequestParam(value = "updatedFields", required = false) List<String> updatedFields) {
        return providerServiceUpdate(providerServer, body, updatedFields);
    }

    // Override this method
    default  ResponseEntity<V1ProviderDto> providerServiceUpdate(String providerServer, V1ProviderDto body, List<String> updatedFields) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/repocreds : CreateRepositoryCredentials creates a new repository credential set
     *
     * @param body Repository definition (required)
     * @param upsert Whether to create in upsert mode. (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "CreateRepositoryCredentials creates a new repository credential set", operationId = "repoCredsServiceCreateRepositoryCredentials",  tags={ "RepoCredsService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1RepoCredsDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/repocreds",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1RepoCredsDto> _repoCredsServiceCreateRepositoryCredentials(@Parameter(example = "Repository definition" ,required=true )  @Valid @RequestBody V1RepoCredsDto body,@Parameter(example = "Whether to create in upsert mode.") @Valid @RequestParam(value = "upsert", required = false) Boolean upsert) {
        return repoCredsServiceCreateRepositoryCredentials(body, upsert);
    }

    // Override this method
    default  ResponseEntity<V1RepoCredsDto> repoCredsServiceCreateRepositoryCredentials(V1RepoCredsDto body, Boolean upsert) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/repocreds/{url} : DeleteRepositoryCredentials deletes a repository credential set from the configuration
     *
     * @param url  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "DeleteRepositoryCredentials deletes a repository credential set from the configuration", operationId = "repoCredsServiceDeleteRepositoryCredentials",  tags={ "RepoCredsService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  Object.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @DeleteMapping(
        value = "/api/v1/repocreds/{url}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<Object> _repoCredsServiceDeleteRepositoryCredentials(@Parameter(example = "",required=true) @PathVariable("url") String url) {
        return repoCredsServiceDeleteRepositoryCredentials(url);
    }

    // Override this method
    default  ResponseEntity<Object> repoCredsServiceDeleteRepositoryCredentials(String url) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/repocreds : ListRepositoryCredentials gets a list of all configured repository credential sets
     *
     * @param url Repo URL for query. (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "ListRepositoryCredentials gets a list of all configured repository credential sets", operationId = "repoCredsServiceListRepositoryCredentials",  tags={ "RepoCredsService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1RepoCredsListDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/repocreds",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<V1RepoCredsListDto> _repoCredsServiceListRepositoryCredentials(@Parameter(example = "Repo URL for query.") @Valid @RequestParam(value = "url", required = false) String url) {
        return repoCredsServiceListRepositoryCredentials(url);
    }

    // Override this method
    default  ResponseEntity<V1RepoCredsListDto> repoCredsServiceListRepositoryCredentials(String url) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/repocreds/{creds.url} : UpdateRepositoryCredentials updates a repository credential set
     *
     * @param credsUrl URL is the URL that this credentials matches to (required)
     * @param body  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "UpdateRepositoryCredentials updates a repository credential set", operationId = "repoCredsServiceUpdateRepositoryCredentials",  tags={ "RepoCredsService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1RepoCredsDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PutMapping(
        value = "/api/v1/repocreds/{creds.url}",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1RepoCredsDto> _repoCredsServiceUpdateRepositoryCredentials(@Parameter(example = "URL is the URL that this credentials matches to",required=true) @PathVariable("creds.url") String credsUrl,@Parameter(example = "" ,required=true )  @Valid @RequestBody V1RepoCredsDto body) {
        return repoCredsServiceUpdateRepositoryCredentials(credsUrl, body);
    }

    // Override this method
    default  ResponseEntity<V1RepoCredsDto> repoCredsServiceUpdateRepositoryCredentials(String credsUrl, V1RepoCredsDto body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/repositories : CreateRepository creates a new repository configuration
     *
     * @param body Repository definition (required)
     * @param upsert Whether to create in upsert mode. (optional)
     * @param credsOnly Whether to operate on credential set instead of repository. (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "CreateRepository creates a new repository configuration", operationId = "repositoryServiceCreateRepository",  tags={ "RepositoryService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1RepositoryDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/repositories",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1RepositoryDto> _repositoryServiceCreateRepository(@Parameter(example = "Repository definition" ,required=true )  @Valid @RequestBody V1RepositoryDto body,@Parameter(example = "Whether to create in upsert mode.") @Valid @RequestParam(value = "upsert", required = false) Boolean upsert,@Parameter(example = "Whether to operate on credential set instead of repository.") @Valid @RequestParam(value = "credsOnly", required = false) Boolean credsOnly) {
        return repositoryServiceCreateRepository(body, upsert, credsOnly);
    }

    // Override this method
    default  ResponseEntity<V1RepositoryDto> repositoryServiceCreateRepository(V1RepositoryDto body, Boolean upsert, Boolean credsOnly) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/repositories/{repo} : DeleteRepository deletes a repository from the configuration
     *
     * @param repo Repo URL for query (required)
     * @param forceRefresh Whether to force a cache refresh on repo&#39;s connection state. (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "DeleteRepository deletes a repository from the configuration", operationId = "repositoryServiceDeleteRepository",  tags={ "RepositoryService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  Object.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @DeleteMapping(
        value = "/api/v1/repositories/{repo}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<Object> _repositoryServiceDeleteRepository(@Parameter(example = "Repo URL for query",required=true) @PathVariable("repo") String repo,@Parameter(example = "Whether to force a cache refresh on repo's connection state.") @Valid @RequestParam(value = "forceRefresh", required = false) Boolean forceRefresh) {
        return repositoryServiceDeleteRepository(repo, forceRefresh);
    }

    // Override this method
    default  ResponseEntity<Object> repositoryServiceDeleteRepository(String repo, Boolean forceRefresh) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/repositories/{repo} : Get returns a repository or its credentials
     *
     * @param repo Repo URL for query (required)
     * @param forceRefresh Whether to force a cache refresh on repo&#39;s connection state. (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Get returns a repository or its credentials", operationId = "repositoryServiceGet",  tags={ "RepositoryService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1RepositoryDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/repositories/{repo}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<V1RepositoryDto> _repositoryServiceGet(@Parameter(example = "Repo URL for query",required=true) @PathVariable("repo") String repo,@Parameter(example = "Whether to force a cache refresh on repo's connection state.") @Valid @RequestParam(value = "forceRefresh", required = false) Boolean forceRefresh) {
        return repositoryServiceGet(repo, forceRefresh);
    }

    // Override this method
    default  ResponseEntity<V1RepositoryDto> repositoryServiceGet(String repo, Boolean forceRefresh) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/repositories/{source.repoURL}/appdetails : GetAppDetails returns workSpace details by given path
     *
     * @param sourceRepoURL RepoURL is the URL to the repository (Git or Helm) that contains the workSpace manifests (required)
     * @param body  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "GetAppDetails returns workSpace details by given path", operationId = "repositoryServiceGetAppDetails",  tags={ "RepositoryService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RepositoryRepoWorkSpaceDetailsResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/repositories/{source.repoURL}/appdetails",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<RepositoryRepoWorkSpaceDetailsResponseDto> _repositoryServiceGetAppDetails(@Parameter(example = "RepoURL is the URL to the repository (Git or Helm) that contains the workSpace manifests",required=true) @PathVariable("source.repoURL") String sourceRepoURL,@Parameter(example = "" ,required=true )  @Valid @RequestBody RepositoryRepoWorkSpaceDetailsQueryDto body) {
        return repositoryServiceGetAppDetails(sourceRepoURL, body);
    }

    // Override this method
    default  ResponseEntity<RepositoryRepoWorkSpaceDetailsResponseDto> repositoryServiceGetAppDetails(String sourceRepoURL, RepositoryRepoWorkSpaceDetailsQueryDto body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/repositories/{repo}/workSpaces : ListApps returns list of workSpaces in the repo
     *
     * @param repo  (required)
     * @param revision  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "ListApps returns list of workSpaces in the repo", operationId = "repositoryServiceListApps",  tags={ "RepositoryService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RepositoryRepoWorkSpacesResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/repositories/{repo}/workSpaces",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<RepositoryRepoWorkSpacesResponseDto> _repositoryServiceListApps(@Parameter(example = "",required=true) @PathVariable("repo") String repo,@Parameter(example = "") @Valid @RequestParam(value = "revision", required = false) String revision) {
        return repositoryServiceListApps(repo, revision);
    }

    // Override this method
    default  ResponseEntity<RepositoryRepoWorkSpacesResponseDto> repositoryServiceListApps(String repo, String revision) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/repositories/{repo}/refs
     *
     * @param repo Repo URL for query (required)
     * @param forceRefresh Whether to force a cache refresh on repo&#39;s connection state. (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "", operationId = "repositoryServiceListRefs",  tags={ "RepositoryService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RepositoryRefsDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/repositories/{repo}/refs",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<RepositoryRefsDto> _repositoryServiceListRefs(@Parameter(example = "Repo URL for query",required=true) @PathVariable("repo") String repo,@Parameter(example = "Whether to force a cache refresh on repo's connection state.") @Valid @RequestParam(value = "forceRefresh", required = false) Boolean forceRefresh) {
        return repositoryServiceListRefs(repo, forceRefresh);
    }

    // Override this method
    default  ResponseEntity<RepositoryRefsDto> repositoryServiceListRefs(String repo, Boolean forceRefresh) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/repositories : ListRepositories gets a list of all configured repositories
     *
     * @param repo Repo URL for query. (optional)
     * @param forceRefresh Whether to force a cache refresh on repo&#39;s connection state. (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "ListRepositories gets a list of all configured repositories", operationId = "repositoryServiceListRepositories", tags={ "RepositoryService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1RepositoryListDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/repositories",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<V1RepositoryListDto> _repositoryServiceListRepositories(@Parameter(example = "Repo URL for query.") @Valid @RequestParam(value = "repo", required = false) String repo,@Parameter(example = "Whether to force a cache refresh on repo's connection state.") @Valid @RequestParam(value = "forceRefresh", required = false) Boolean forceRefresh) {
        return repositoryServiceListRepositories(repo, forceRefresh);
    }

    // Override this method
    default  ResponseEntity<V1RepositoryListDto> repositoryServiceListRepositories(String repo, Boolean forceRefresh) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/repositories/{repo.repo} : UpdateRepository updates a repository configuration
     *
     * @param repoRepo Repo contains the URL to the remote repository (required)
     * @param body  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "UpdateRepository updates a repository configuration", operationId = "repositoryServiceUpdateRepository",  tags={ "RepositoryService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1RepositoryDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PutMapping(
        value = "/api/v1/repositories/{repo.repo}",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1RepositoryDto> _repositoryServiceUpdateRepository(@Parameter(example = "Repo contains the URL to the remote repository",required=true) @PathVariable("repo.repo") String repoRepo,@Parameter(example = "" ,required=true )  @Valid @RequestBody V1RepositoryDto body) {
        return repositoryServiceUpdateRepository(repoRepo, body);
    }

    // Override this method
    default  ResponseEntity<V1RepositoryDto> repositoryServiceUpdateRepository(String repoRepo, V1RepositoryDto body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/repositories/{repo}/validate : ValidateAccess validates access to a repository with given parameters
     *
     * @param repo The URL to the repo (required)
     * @param body The URL to the repo (required)
     * @param username Username for accessing repo. (optional)
     * @param password Password for accessing repo. (optional)
     * @param sshPrivateKey Private key data for accessing SSH repository. (optional)
     * @param insecure Whether to skip certificate or host key validation. (optional)
     * @param tlsClientCertData TLS client cert data for accessing HTTPS repository. (optional)
     * @param tlsClientCertKey TLS client cert key for accessing HTTPS repository. (optional)
     * @param type The type of the repo. (optional)
     * @param name The name of the repo. (optional)
     * @param proxy HTTP/HTTPS proxy to access the repository. (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "ValidateAccess validates access to a repository with given parameters", operationId = "repositoryServiceValidateAccess",  tags={ "RepositoryService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  Object.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/repositories/{repo}/validate",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<Object> _repositoryServiceValidateAccess(@Parameter(example = "The URL to the repo",required=true) @PathVariable("repo") String repo,@Parameter(example = "The URL to the repo" ,required=true )  @Valid @RequestBody String body,@Parameter(example = "Username for accessing repo.") @Valid @RequestParam(value = "username", required = false) String username,@Parameter(example = "Password for accessing repo.") @Valid @RequestParam(value = "password", required = false) String password,@Parameter(example = "Private key data for accessing SSH repository.") @Valid @RequestParam(value = "sshPrivateKey", required = false) String sshPrivateKey,@Parameter(example = "Whether to skip certificate or host key validation.") @Valid @RequestParam(value = "insecure", required = false) Boolean insecure,@Parameter(example = "TLS client cert data for accessing HTTPS repository.") @Valid @RequestParam(value = "tlsClientCertData", required = false) String tlsClientCertData,@Parameter(example = "TLS client cert key for accessing HTTPS repository.") @Valid @RequestParam(value = "tlsClientCertKey", required = false) String tlsClientCertKey,@Parameter(example = "The type of the repo.") @Valid @RequestParam(value = "type", required = false) String type,@Parameter(example = "The name of the repo.") @Valid @RequestParam(value = "name", required = false) String name,@Parameter(example = "HTTP/HTTPS proxy to access the repository.") @Valid @RequestParam(value = "proxy", required = false) String proxy) {
        return repositoryServiceValidateAccess(repo, body, username, password, sshPrivateKey, insecure, tlsClientCertData, tlsClientCertKey, type, name, proxy);
    }

    // Override this method
    default  ResponseEntity<Object> repositoryServiceValidateAccess(String repo, String body, String username, String password, String sshPrivateKey, Boolean insecure, String tlsClientCertData, String tlsClientCertKey, String type, String name, String proxy) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/settings : Get returns API Service settings
     *
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Get returns API Service settings", operationId = "settingsServiceGet",  tags={ "SettingsService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  ProviderSettingsDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/settings",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<ProviderSettingsDto> _settingsServiceGet() {
        return settingsServiceGet();
    }

    // Override this method
    default  ResponseEntity<ProviderSettingsDto> settingsServiceGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/version : Version returns version information of the API server
     *
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Version returns version information of the API server", operationId = "versionServiceVersion",  tags={ "VersionService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  VersionVersionMessageDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/version",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<VersionVersionMessageDto> _versionServiceVersion() {
        return versionServiceVersion();
    }

    // Override this method
    default  ResponseEntity<VersionVersionMessageDto> versionServiceVersion() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/workSpaces : Creates an workSpace
     *
     * @param body  (required)
     * @param upsert update if already created (optional)
     * @param validate validates and execute a dry run (optional)
     * @return A successful response with the created workSpace (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Creates an workSpace", operationId = "workSpaceServiceCreate",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response with the created workSpace", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1WorkSpaceDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/workSpaces",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1WorkSpaceDto> _workSpaceServiceCreate(@Parameter(example = "" ,required=true )  @Valid @RequestBody V1WorkSpaceDto body,@Parameter(example = "update if already created") @Valid @RequestParam(value = "upsert", required = false) Boolean upsert,@Parameter(example = "validates and execute a dry run") @Valid @RequestParam(value = "validate", required = false) Boolean validate) {
        return workSpaceServiceCreate(body, upsert, validate);
    }

    // Override this method
    default  ResponseEntity<V1WorkSpaceDto> workSpaceServiceCreate(V1WorkSpaceDto body, Boolean upsert, Boolean validate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/workSpaces/{name} : Delete deletes an workSpace
     *
     * @param name  (required)
     * @param cascade  (optional)
     * @param propagationPolicy  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Delete deletes an workSpace", operationId = "workSpaceServiceDelete",  tags={ "WorkSpaceService" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  WorkSpaceWorkSpaceResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @DeleteMapping(
        value = "/api/v1/workSpaces/{name}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<WorkSpaceWorkSpaceResponseDto> _workSpaceServiceDelete(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "") @Valid @RequestParam(value = "cascade", required = false) Boolean cascade,@Parameter(example = "") @Valid @RequestParam(value = "propagationPolicy", required = false) String propagationPolicy) {
        return workSpaceServiceDelete(name, cascade, propagationPolicy);
    }

    // Override this method
    default  ResponseEntity<WorkSpaceWorkSpaceResponseDto> workSpaceServiceDelete(String name, Boolean cascade, String propagationPolicy) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/workSpaces/{name}/resource : DeleteResource deletes a single workSpace resource
     *
     * @param name  (required)
     * @param namespace  (optional)
     * @param resourceName  (optional)
     * @param version  (optional)
     * @param group  (optional)
     * @param kind  (optional)
     * @param force  (optional)
     * @param orphan  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "DeleteResource deletes a single workSpace resource", operationId = "workSpaceServiceDeleteResource",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  WorkSpaceWorkSpaceResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @DeleteMapping(
        value = "/api/v1/workSpaces/{name}/resource",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<WorkSpaceWorkSpaceResponseDto> _workSpaceServiceDeleteResource(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "") @Valid @RequestParam(value = "namespace", required = false) String namespace,@Parameter(example = "") @Valid @RequestParam(value = "resourceName", required = false) String resourceName,@Parameter(example = "") @Valid @RequestParam(value = "version", required = false) String version,@Parameter(example = "") @Valid @RequestParam(value = "group", required = false) String group,@Parameter(example = "") @Valid @RequestParam(value = "kind", required = false) String kind,@Parameter(example = "") @Valid @RequestParam(value = "force", required = false) Boolean force,@Parameter(example = "") @Valid @RequestParam(value = "orphan", required = false) Boolean orphan) {
        return workSpaceServiceDeleteResource(name, namespace, resourceName, version, group, kind, force, orphan);
    }

    // Override this method
    default  ResponseEntity<WorkSpaceWorkSpaceResponseDto> workSpaceServiceDeleteResource(String name, String namespace, String resourceName, String version, String group, String kind, Boolean force, Boolean orphan) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces/{name}/device/{resource}/logs : DeviceLogs returns stream of log entries for the specified device.
     *
     * @param name  (required)
     * @param resource  (required)
     * @param namespace  (optional)
     * @param container  (optional)
     * @param sinceSeconds  (optional)
     * @param sinceTimeSeconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)
     * @param sinceTimeNanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)
     * @param tailLines  (optional)
     * @param follow  (optional)
     * @param untilTime  (optional)
     * @param filter  (optional)
     * @param kind  (optional)
     * @param group  (optional)
     * @param resourceName  (optional)
     * @return A successful response.(streaming responses) (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "DeviceLogs returns stream of log entries for the specified device.", operationId = "workSpaceServiceDeviceLogs",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.(streaming responses)", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =   InlineResponse2001Dto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces/{name}/device/{resource}/logs",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<InlineResponse2001Dto> _workSpaceServiceDeviceLogs(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "",required=true) @PathVariable("resource") String resource,@Parameter(example = "") @Valid @RequestParam(value = "namespace", required = false) String namespace,@Parameter(example = "") @Valid @RequestParam(value = "container", required = false) String container,@Parameter(example = "") @Valid @RequestParam(value = "sinceSeconds", required = false) String sinceSeconds,@Parameter(example = "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.") @Valid @RequestParam(value = "sinceTime.seconds", required = false) String sinceTimeSeconds,@Parameter(example = "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.") @Valid @RequestParam(value = "sinceTime.nanos", required = false) Integer sinceTimeNanos,@Parameter(example = "") @Valid @RequestParam(value = "tailLines", required = false) String tailLines,@Parameter(example = "") @Valid @RequestParam(value = "follow", required = false) Boolean follow,@Parameter(example = "") @Valid @RequestParam(value = "untilTime", required = false) String untilTime,@Parameter(example = "") @Valid @RequestParam(value = "filter", required = false) String filter,@Parameter(example = "") @Valid @RequestParam(value = "kind", required = false) String kind,@Parameter(example = "") @Valid @RequestParam(value = "group", required = false) String group,@Parameter(example = "") @Valid @RequestParam(value = "resourceName", required = false) String resourceName) {
        return workSpaceServiceDeviceLogs(name, resource, namespace, container, sinceSeconds, sinceTimeSeconds, sinceTimeNanos, tailLines, follow, untilTime, filter, kind, group, resourceName);
    }

    // Override this method
    default  ResponseEntity<InlineResponse2001Dto> workSpaceServiceDeviceLogs(String name, String resource, String namespace, String container, String sinceSeconds, String sinceTimeSeconds, Integer sinceTimeNanos, String tailLines, Boolean follow, String untilTime, String filter, String kind, String group, String resourceName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces/{name} : Get returns an workSpace by name
     *
     * @param name the workSpace&#39;s name (required)
     * @param refresh forces workSpace reconciliation if set to true. (optional)
     * @param resourceVersion when specified with a watch call, shows changes that occur after that particular version of a resource. (optional)
     * @param selector the selector to to restrict returned list to workSpaces only with matched labels. (optional)
     * @param repo the repoURL to restrict returned list workSpaces. (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Get returns an workSpace by name", operationId = "workSpaceServiceGet",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1WorkSpaceDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces/{name}",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<V1WorkSpaceDto> _workSpaceServiceGet(@Parameter(example = "the workSpace's name",required=true) @PathVariable("name") String name,@Parameter(example = "forces workSpace reconciliation if set to true.") @Valid @RequestParam(value = "refresh", required = false) String refresh,@Parameter(example = "when specified with a watch call, shows changes that occur after that particular version of a resource.") @Valid @RequestParam(value = "resourceVersion", required = false) String resourceVersion,@Parameter(example = "the selector to to restrict returned list to workSpaces only with matched labels.") @Valid @RequestParam(value = "selector", required = false) String selector,@Parameter(example = "the repoURL to restrict returned list workSpaces.") @Valid @RequestParam(value = "repo", required = false) String repo) {
        return workSpaceServiceGet(name, refresh, resourceVersion, selector, repo);
    }

    // Override this method
    default  ResponseEntity<V1WorkSpaceDto> workSpaceServiceGet(String name, String refresh, String resourceVersion, String selector, String repo) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces/{name}/manifests : GetManifests returns workSpace manifests
     *
     * @param name  (required)
     * @param revision  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "GetManifests returns workSpace manifests", operationId = "workSpaceServiceGetManifests",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RepositoryManifestResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces/{name}/manifests",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<RepositoryManifestResponseDto> _workSpaceServiceGetManifests(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "") @Valid @RequestParam(value = "revision", required = false) String revision) {
        return workSpaceServiceGetManifests(name, revision);
    }

    // Override this method
    default  ResponseEntity<RepositoryManifestResponseDto> workSpaceServiceGetManifests(String name, String revision) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces/{name}/resource : GetResource returns single workSpace resource
     *
     * @param name  (required)
     * @param namespace  (optional)
     * @param resourceName  (optional)
     * @param version  (optional)
     * @param group  (optional)
     * @param kind  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "GetResource returns single workSpace resource", operationId = "workSpaceServiceGetResource",   tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  WorkSpaceWorkSpaceResourceResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces/{name}/resource",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<WorkSpaceWorkSpaceResourceResponseDto> _workSpaceServiceGetResource(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "") @Valid @RequestParam(value = "namespace", required = false) String namespace,@Parameter(example = "") @Valid @RequestParam(value = "resourceName", required = false) String resourceName,@Parameter(example = "") @Valid @RequestParam(value = "version", required = false) String version,@Parameter(example = "") @Valid @RequestParam(value = "group", required = false) String group,@Parameter(example = "") @Valid @RequestParam(value = "kind", required = false) String kind) {
        return workSpaceServiceGetResource(name, namespace, resourceName, version, group, kind);
    }

    // Override this method
    default  ResponseEntity<WorkSpaceWorkSpaceResourceResponseDto> workSpaceServiceGetResource(String name, String namespace, String resourceName, String version, String group, String kind) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces/{name}/syncwindows : Get returns sync windows of the workSpace
     *
     * @param name  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Get returns sync windows of the workSpace", operationId = "workSpaceServiceGetWorkSpaceSyncWindows",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  WorkSpaceWorkSpaceSyncWindowsResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces/{name}/syncwindows",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<WorkSpaceWorkSpaceSyncWindowsResponseDto> _workSpaceServiceGetWorkSpaceSyncWindows(@Parameter(example = "",required=true) @PathVariable("name") String name) {
        return workSpaceServiceGetWorkSpaceSyncWindows(name);
    }

    // Override this method
    default  ResponseEntity<WorkSpaceWorkSpaceSyncWindowsResponseDto> workSpaceServiceGetWorkSpaceSyncWindows(String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces : Returns list of available workSpaces. It supports parameters to limit the obtained results
     *
     * @param name the workSpace&#39;s name. (optional)
     * @param refresh forces workSpace reconciliation if set to true. (optional)
     * @param resourceVersion when specified with a watch call, shows changes that occur after that particular version of a resource. (optional)
     * @param selector the selector to restrict returned list to workSpaces only with matched labels. (optional)
     * @param repo the repoURL to restrict returned list workSpaces. (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Returns list of available workSpaces. It supports parameters to limit the obtained results", operationId = "workSpaceServiceList",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1WorkSpaceListDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<V1WorkSpaceListDto> _workSpaceServiceList(@Parameter(example = "the workSpace's name.") @Valid @RequestParam(value = "name", required = false) String name,@Parameter(example = "forces workSpace reconciliation if set to true.") @Valid @RequestParam(value = "refresh", required = false) String refresh,@Parameter(example = "when specified with a watch call, shows changes that occur after that particular version of a resource.") @Valid @RequestParam(value = "resourceVersion", required = false) String resourceVersion,@Parameter(example = "the selector to restrict returned list to workSpaces only with matched labels.") @Valid @RequestParam(value = "selector", required = false) String selector,@Parameter(example = "the repoURL to restrict returned list workSpaces.") @Valid @RequestParam(value = "repo", required = false) String repo) {
        return workSpaceServiceList(name, refresh, resourceVersion, selector, repo);
    }

    // Override this method
    default  ResponseEntity<V1WorkSpaceListDto> workSpaceServiceList(String name, String refresh, String resourceVersion, String selector, String repo) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces/{name}/resource/actions : Returns a list of resource actions
     *
     * @param name  (required)
     * @param namespace  (optional)
     * @param resourceName  (optional)
     * @param version  (optional)
     * @param group  (optional)
     * @param kind  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Returns a list of resource actions", operationId = "workSpaceServiceListResourceActions",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  WorkSpaceResourceActionsListResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces/{name}/resource/actions",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<WorkSpaceResourceActionsListResponseDto> _workSpaceServiceListResourceActions(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "") @Valid @RequestParam(value = "namespace", required = false) String namespace,@Parameter(example = "") @Valid @RequestParam(value = "resourceName", required = false) String resourceName,@Parameter(example = "") @Valid @RequestParam(value = "version", required = false) String version,@Parameter(example = "") @Valid @RequestParam(value = "group", required = false) String group,@Parameter(example = "") @Valid @RequestParam(value = "kind", required = false) String kind) {
        return workSpaceServiceListResourceActions(name, namespace, resourceName, version, group, kind);
    }

    // Override this method
    default  ResponseEntity<WorkSpaceResourceActionsListResponseDto> workSpaceServiceListResourceActions(String name, String namespace, String resourceName, String version, String group, String kind) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces/{name}/events : ListResourceEvents returns a list of event resources
     *
     * @param name  (required)
     * @param resourceNamespace  (optional)
     * @param resourceName  (optional)
     * @param resourceUID  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "ListResourceEvents returns a list of event resources", operationId = "workSpaceServiceListResourceEvents",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1EventListDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces/{name}/events",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<V1EventListDto> _workSpaceServiceListResourceEvents(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "") @Valid @RequestParam(value = "resourceNamespace", required = false) String resourceNamespace,@Parameter(example = "") @Valid @RequestParam(value = "resourceName", required = false) String resourceName,@Parameter(example = "") @Valid @RequestParam(value = "resourceUID", required = false) String resourceUID) {
        return workSpaceServiceListResourceEvents(name, resourceNamespace, resourceName, resourceUID);
    }

    // Override this method
    default  ResponseEntity<V1EventListDto> workSpaceServiceListResourceEvents(String name, String resourceNamespace, String resourceName, String resourceUID) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces/{workSpaceName}/managed-resources : ManagedResources returns list of managed resources
     *
     * @param workSpaceName  (required)
     * @param namespace  (optional)
     * @param name  (optional)
     * @param version  (optional)
     * @param group  (optional)
     * @param kind  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "ManagedResources returns list of managed resources", operationId = "workSpaceServiceManagedResources",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  WorkSpaceManagedResourcesResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces/{workSpaceName}/managed-resources",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<WorkSpaceManagedResourcesResponseDto> _workSpaceServiceManagedResources(@Parameter(example = "",required=true) @PathVariable("workSpaceName") String workSpaceName,@Parameter(example = "") @Valid @RequestParam(value = "namespace", required = false) String namespace,@Parameter(example = "") @Valid @RequestParam(value = "name", required = false) String name,@Parameter(example = "") @Valid @RequestParam(value = "version", required = false) String version,@Parameter(example = "") @Valid @RequestParam(value = "group", required = false) String group,@Parameter(example = "") @Valid @RequestParam(value = "kind", required = false) String kind) {
        return workSpaceServiceManagedResources(workSpaceName, namespace, name, version, group, kind);
    }

    // Override this method
    default  ResponseEntity<WorkSpaceManagedResourcesResponseDto> workSpaceServiceManagedResources(String workSpaceName, String namespace, String name, String version, String group, String kind) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/workSpaces/{name} : Patch patch an workSpace
     *
     * @param name  (required)
     * @param body  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Patch patch an workSpace", operationId = "workSpaceServicePatch",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1WorkSpaceDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PatchMapping(
        value = "/api/v1/workSpaces/{name}",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1WorkSpaceDto> _workSpaceServicePatch(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "" ,required=true )  @Valid @RequestBody WorkSpaceWorkSpacePatchRequestDto body) {
        return workSpaceServicePatch(name, body);
    }

    // Override this method
    default  ResponseEntity<V1WorkSpaceDto> workSpaceServicePatch(String name, WorkSpaceWorkSpacePatchRequestDto body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/workSpaces/{name}/resource : PatchResource patch single workSpace resource
     *
     * @param name  (required)
     * @param body  (required)
     * @param namespace  (optional)
     * @param resourceName  (optional)
     * @param version  (optional)
     * @param group  (optional)
     * @param kind  (optional)
     * @param patchType  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "PatchResource patch single workSpace resource", operationId = "workSpaceServicePatchResource",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  WorkSpaceWorkSpaceResourceResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/workSpaces/{name}/resource",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<WorkSpaceWorkSpaceResourceResponseDto> _workSpaceServicePatchResource(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "" ,required=true )  @Valid @RequestBody String body,@Parameter(example = "") @Valid @RequestParam(value = "namespace", required = false) String namespace,@Parameter(example = "") @Valid @RequestParam(value = "resourceName", required = false) String resourceName,@Parameter(example = "") @Valid @RequestParam(value = "version", required = false) String version,@Parameter(example = "") @Valid @RequestParam(value = "group", required = false) String group,@Parameter(example = "") @Valid @RequestParam(value = "kind", required = false) String kind,@Parameter(example = "") @Valid @RequestParam(value = "patchType", required = false) String patchType) {
        return workSpaceServicePatchResource(name, body, namespace, resourceName, version, group, kind, patchType);
    }

    // Override this method
    default  ResponseEntity<WorkSpaceWorkSpaceResourceResponseDto> workSpaceServicePatchResource(String name, String body, String namespace, String resourceName, String version, String group, String kind, String patchType) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces/{workSpaceName}/resource-tree : ResourceTree returns resource tree
     *
     * @param workSpaceName  (required)
     * @param namespace  (optional)
     * @param name  (optional)
     * @param version  (optional)
     * @param group  (optional)
     * @param kind  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "ResourceTree returns resource tree", operationId = "workSpaceServiceResourceTree",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1WorkSpaceTreeDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces/{workSpaceName}/resource-tree",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<V1WorkSpaceTreeDto> _workSpaceServiceResourceTree(@Parameter(example = "",required=true) @PathVariable("workSpaceName") String workSpaceName,@Parameter(example = "") @Valid @RequestParam(value = "namespace", required = false) String namespace,@Parameter(example = "") @Valid @RequestParam(value = "name", required = false) String name,@Parameter(example = "") @Valid @RequestParam(value = "version", required = false) String version,@Parameter(example = "") @Valid @RequestParam(value = "group", required = false) String group,@Parameter(example = "") @Valid @RequestParam(value = "kind", required = false) String kind) {
        return workSpaceServiceResourceTree(workSpaceName, namespace, name, version, group, kind);
    }

    // Override this method
    default  ResponseEntity<V1WorkSpaceTreeDto> workSpaceServiceResourceTree(String workSpaceName, String namespace, String name, String version, String group, String kind) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces/{name}/revisions/{revision}/metadata : Get the meta-data (author, date, tags, message) for a specific revision of the workSpace
     *
     * @param name the workSpace&#39;s name (required)
     * @param revision the revision of the app (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Get the meta-data (author, date, tags, message) for a specific revision of the workSpace", operationId = "workSpaceServiceRevisionMetadata", tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1RevisionMetadataDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces/{name}/revisions/{revision}/metadata",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<V1RevisionMetadataDto> _workSpaceServiceRevisionMetadata(@Parameter(example = "the workSpace's name",required=true) @PathVariable("name") String name,@Parameter(example = "the revision of the app",required=true) @PathVariable("revision") String revision) {
        return workSpaceServiceRevisionMetadata(name, revision);
    }

    // Override this method
    default  ResponseEntity<V1RevisionMetadataDto> workSpaceServiceRevisionMetadata(String name, String revision) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/workSpaces/{name}/rollback : Rollback syncs an workSpace to its target state
     *
     * @param name  (required)
     * @param body  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Rollback syncs an workSpace to its target state", operationId = "workSpaceServiceRollback",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1WorkSpaceDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/workSpaces/{name}/rollback",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1WorkSpaceDto> _workSpaceServiceRollback(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "" ,required=true )  @Valid @RequestBody WorkSpaceWorkSpaceRollbackRequestDto body) {
        return workSpaceServiceRollback(name, body);
    }

    // Override this method
    default  ResponseEntity<V1WorkSpaceDto> workSpaceServiceRollback(String name, WorkSpaceWorkSpaceRollbackRequestDto body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/workSpaces/{name}/resource/actions : Run resource action
     *
     * @param name  (required)
     * @param body  (required)
     * @param namespace  (optional)
     * @param resourceName  (optional)
     * @param version  (optional)
     * @param group  (optional)
     * @param kind  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Run resource action", operationId = "workSpaceServiceRunResourceAction",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  WorkSpaceWorkSpaceResponseDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/workSpaces/{name}/resource/actions",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<WorkSpaceWorkSpaceResponseDto> _workSpaceServiceRunResourceAction(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "" ,required=true )  @Valid @RequestBody String body,@Parameter(example = "") @Valid @RequestParam(value = "namespace", required = false) String namespace,@Parameter(example = "") @Valid @RequestParam(value = "resourceName", required = false) String resourceName,@Parameter(example = "") @Valid @RequestParam(value = "version", required = false) String version,@Parameter(example = "") @Valid @RequestParam(value = "group", required = false) String group,@Parameter(example = "") @Valid @RequestParam(value = "kind", required = false) String kind) {
        return workSpaceServiceRunResourceAction(name, body, namespace, resourceName, version, group, kind);
    }

    // Override this method
    default  ResponseEntity<WorkSpaceWorkSpaceResponseDto> workSpaceServiceRunResourceAction(String name, String body, String namespace, String resourceName, String version, String group, String kind) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/workSpaces/{name}/sync : Sync syncs an workSpace to its target state
     *
     * @param name  (required)
     * @param body  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Sync syncs an workSpace to its target state", operationId = "workSpaceServiceSync", tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1WorkSpaceDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PostMapping(
        value = "/api/v1/workSpaces/{name}/sync",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1WorkSpaceDto> _workSpaceServiceSync(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "" ,required=true )  @Valid @RequestBody WorkSpaceWorkSpaceSyncRequestDto body) {
        return workSpaceServiceSync(name, body);
    }

    // Override this method
    default  ResponseEntity<V1WorkSpaceDto> workSpaceServiceSync(String name, WorkSpaceWorkSpaceSyncRequestDto body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/workSpaces/{name}/operation : Terminates the currently running operation
     *
     * @param name  (required)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Terminates the currently running operation", operationId = "workSpaceServiceTerminateOperation",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  Object.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @DeleteMapping(
        value = "/api/v1/workSpaces/{name}/operation",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<Object> _workSpaceServiceTerminateOperation(@Parameter(example = "",required=true) @PathVariable("name") String name) {
        return workSpaceServiceTerminateOperation(name);
    }

    // Override this method
    default  ResponseEntity<Object> workSpaceServiceTerminateOperation(String name) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/workSpaces/{workSpace.metadata.name} : Update updates an workSpace
     *
     * @param workSpaceMetadataName Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional (required)
     * @param body  (required)
     * @param validate  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Update updates an workSpace", operationId = "workSpaceServiceUpdate",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1WorkSpaceDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PutMapping(
        value = "/api/v1/workSpaces/{workSpace.metadata.name}",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1WorkSpaceDto> _workSpaceServiceUpdate(@Parameter(example = "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional",required=true) @PathVariable("workSpace.metadata.name") String workSpaceMetadataName,@Parameter(example = "" ,required=true )  @Valid @RequestBody V1WorkSpaceDto body,@Parameter(example = "") @Valid @RequestParam(value = "validate", required = false) Boolean validate) {
        return workSpaceServiceUpdate(workSpaceMetadataName, body, validate);
    }

    // Override this method
    default  ResponseEntity<V1WorkSpaceDto> workSpaceServiceUpdate(String workSpaceMetadataName, V1WorkSpaceDto body, Boolean validate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/workSpaces/{name}/spec : UpdateSpec updates an workSpace spec
     *
     * @param name  (required)
     * @param body  (required)
     * @param validate  (optional)
     * @return A successful response. (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "UpdateSpec updates an workSpace spec", operationId = "workSpaceServiceUpdateSpec",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  V1WorkSpaceSpecDto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @PutMapping(
        value = "/api/v1/workSpaces/{name}/spec",
        produces = { "workSpace/json" },
        consumes = { "workSpace/json" }
    )
    default ResponseEntity<V1WorkSpaceSpecDto> _workSpaceServiceUpdateSpec(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "" ,required=true )  @Valid @RequestBody V1WorkSpaceSpecDto body,@Parameter(example = "") @Valid @RequestParam(value = "validate", required = false) Boolean validate) {
        return workSpaceServiceUpdateSpec(name, body, validate);
    }

    // Override this method
    default  ResponseEntity<V1WorkSpaceSpecDto> workSpaceServiceUpdateSpec(String name, V1WorkSpaceSpecDto body, Boolean validate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/workSpaces/{name}/logs : Returns stream of log entries for the specified workSpace
     *
     * @param name  (required)
     * @param namespace  (optional)
     * @param podName  (optional)
     * @param container  (optional)
     * @param sinceSeconds  (optional)
     * @param sinceTimeSeconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive. (optional)
     * @param sinceTimeNanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context. (optional)
     * @param tailLines  (optional)
     * @param follow  (optional)
     * @param untilTime  (optional)
     * @param filter  (optional)
     * @param kind  (optional)
     * @param group  (optional)
     * @param resourceName  (optional)
     * @return A successful response.(streaming responses) (status code 200)
     *         or An unexpected error response. (status code 500)
     */
    @Operation(summary = "Returns stream of log entries for the specified workSpace", operationId = "workSpaceServiceWorkSpaceLogs",  tags={ "WorkSpaceService", })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A successful response.(streaming responses)", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  InlineResponse200Dto.class))}),
        @ApiResponse(responseCode = "500", description = "An unexpected error response.", content = { @Content(mediaType = "application/json", schema = @Schema(implementation =  RuntimeErrorDto.class))})})
    @GetMapping(
        value = "/api/v1/workSpaces/{name}/logs",
        produces = { "workSpace/json" }
    )
    default ResponseEntity<InlineResponse200Dto> _workSpaceServiceWorkSpaceLogs(@Parameter(example = "",required=true) @PathVariable("name") String name,@Parameter(example = "") @Valid @RequestParam(value = "namespace", required = false) String namespace,@Parameter(example = "") @Valid @RequestParam(value = "podName", required = false) String podName,@Parameter(example = "") @Valid @RequestParam(value = "container", required = false) String container,@Parameter(example = "") @Valid @RequestParam(value = "sinceSeconds", required = false) String sinceSeconds,@Parameter(example = "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.") @Valid @RequestParam(value = "sinceTime.seconds", required = false) String sinceTimeSeconds,@Parameter(example = "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.") @Valid @RequestParam(value = "sinceTime.nanos", required = false) Integer sinceTimeNanos,@Parameter(example = "") @Valid @RequestParam(value = "tailLines", required = false) String tailLines,@Parameter(example = "") @Valid @RequestParam(value = "follow", required = false) Boolean follow,@Parameter(example = "") @Valid @RequestParam(value = "untilTime", required = false) String untilTime,@Parameter(example = "") @Valid @RequestParam(value = "filter", required = false) String filter,@Parameter(example = "") @Valid @RequestParam(value = "kind", required = false) String kind,@Parameter(example = "") @Valid @RequestParam(value = "group", required = false) String group,@Parameter(example = "") @Valid @RequestParam(value = "resourceName", required = false) String resourceName) {
        return workSpaceServiceWorkSpaceLogs(name, namespace, podName, container, sinceSeconds, sinceTimeSeconds, sinceTimeNanos, tailLines, follow, untilTime, filter, kind, group, resourceName);
    }

    // Override this method
    default  ResponseEntity<InlineResponse200Dto> workSpaceServiceWorkSpaceLogs(String name, String namespace, String podName, String container, String sinceSeconds, String sinceTimeSeconds, Integer sinceTimeNanos, String tailLines, Boolean follow, String untilTime, String filter, String kind, String group, String resourceName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
